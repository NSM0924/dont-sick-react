{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","auth","getAuth","messaging","getMessaging","useState","number","setNumber","name","setName","token","setToken","useEffect","onAuthStateChanged","user","console","log","email","includes","alert","signOut","substr","displayName","getToken","serviceWorkerRegistration","navigator","serviceWorker","register","vapidKey","then","currentToken","catch","err","provider","GoogleAuthProvider","setCustomParameters","login_hint","signInWithRedirect","onMessage","payload","notification","title","body","className","onClick","topic","fetch","method","headers","Headers","Authorization","response","status","Error","text","error","subscribeTokenToTopic","to","registration_tokens","JSON","stringify","unsubscribeTokenToTopic","msg","message","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86d38ca1.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { getMessaging, getToken } from \"@firebase/messaging\";\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDugiSdAbhcAv4kjvZIczRILR0cWnyoLE4\",\n  authDomain: \"don-t-sick.firebaseapp.com\",\n  projectId: \"don-t-sick\",\n  storageBucket: \"don-t-sick.appspot.com\",\n  messagingSenderId: \"713607862724\",\n  appId: \"1:713607862724:web:5ada0cc3cdaa6370662c91\",\n};\n\nexport const swRegistration = async () => {\n  try {\n    await navigator.serviceWorker.register(\n      \"/dont-sick-react/firebase-messaging-sw.js\"\n    );\n    console.log(\"a\");\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\n","import \"./App.css\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  GoogleAuthProvider,\n  signOut,\n  onAuthStateChanged,\n} from \"firebase/auth\";\nimport { getMessaging, getToken, onMessage } from \"firebase/messaging\";\nimport { app } from \"./firebase\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const auth = getAuth(app);\n  const messaging = getMessaging();\n  const [number, setNumber] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n\n  useEffect(() => {\n    // 로그인한 사용자 가져오기\u001c\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        console.log(user);\n        let email = user.email;\n        // 학교 계정이 아니면 다시 로그인\n        if (!email.includes(\"@sdh.hs.kr\")) {\n          alert(\"학교계정으로만 로그인 가능합니다.\");\n          signOut(auth);\n          return;\n        }\n        // 학번 이름 저장\n        else if (email.includes(\"sdh19\")) {\n          setNumber(`3${email.substr(5, 4)}`);\n        } else if (email.includes(\"sdh20\")) {\n          setNumber(`2${email.substr(7, 4)}`);\n        } else if (email.includes(\"sdh21\")) {\n          setNumber(`1${email.substr(5, 4)}`);\n        }\n        setName(user.displayName);\n\n        // 알림 토큰 저장\n        const serviceWorker = () => {\n          navigator.serviceWorker.register(\n            \"/dont-sick-react/firebase-messaging-sw.js\"\n          );\n        };\n        getToken(messaging, {\n          serviceWorkerRegistration: serviceWorker,\n          vapidKey:\n            \"BLnmZ7MoMERjyVHv4b791C7j1_-xqcVi9aCrVWDDFovZSGDgK9FROae3J8Q7AWqTJwbQDc2Dk4LrU0zAEUVqfVQ\",\n        })\n          .then((currentToken) => {\n            if (currentToken) {\n              console.log(currentToken);\n              setToken(currentToken);\n            } else {\n              console.log(\n                \"No registration token available. Request permission to generate one.\"\n              );\n              alert(\"알림 권한을 허용해주세요.\");\n            }\n          })\n          .catch((err) => {\n            console.log(\"An error occurred while retrieving token. \", err);\n            alert(\"알림 권한을 허용해주세요.\");\n          });\n      }\n      // 로그인이 안되어있으면 로그인 페이지로 이동\n      else {\n        const provider = new GoogleAuthProvider();\n\n        provider.setCustomParameters({\n          login_hint: \"sdh@sdh.hs.kr\",\n        });\n\n        signInWithRedirect(auth, provider);\n      }\n    });\n  }, [auth]);\n\n  const logout = () => {\n    signOut(auth);\n  };\n\n  // 포그라운드일 때 알림이 오면\n  onMessage(messaging, (payload) => {\n    console.log(payload);\n    alert(`${payload.notification.title}\\n${payload.notification.body}`);\n  });\n\n  // 알림 받기 등록\n  const subscribeTokenToTopic = (token, topic) => {\n    fetch(`https://iid.googleapis.com/iid/v1/${token}/rel/topics/${topic}`, {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization:\n          \"key=AAAApiZX2cQ:APA91bGE4My7SUbJhjgtK66X8eADgEsxnBlebWlqIjfUw2YSxn43g3kZjH5mSIcHLdyH1Wfg0cwCWw8rv66tR_D2y3IyH3MCQf-9nfN4zH_SqyvqF-yOeVApflNV6bY_4SbwmgFzLKjp\",\n      }),\n    })\n      .then((response) => {\n        if (response.status < 200 || response.status >= 400) {\n          throw new Error(\n            `Error Subscribing to topic: ${\n              response.status\n            } - ${response.text()}`\n          );\n        }\n        console.log(`Subscribed to \"${topic}\"`);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  // 알림 받기 등록 취소\n  const unsubscribeTokenToTopic = (token, topic) => {\n    let body = {\n      to: `/topics/${topic}`,\n      registration_tokens: [token],\n    };\n    fetch(`https://iid.googleapis.com/iid/v1:batchRemove`, {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization:\n          \"key=AAAApiZX2cQ:APA91bGE4My7SUbJhjgtK66X8eADgEsxnBlebWlqIjfUw2YSxn43g3kZjH5mSIcHLdyH1Wfg0cwCWw8rv66tR_D2y3IyH3MCQf-9nfN4zH_SqyvqF-yOeVApflNV6bY_4SbwmgFzLKjp\",\n        \"Content-Type\": \"application/json\",\n      }),\n      body: JSON.stringify(body),\n    })\n      .then((response) => {\n        if (response.status < 200 || response.status >= 400) {\n          throw new Error(\n            `Error Unsubscribing to topic: ${\n              response.status\n            } - ${response.text()}`\n          );\n        }\n        console.log(`Unsubscribed to \"${topic}\"`);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  // 알림 받기에 등록한 사람들에게 알림 보내기\n  const sendToTopic = (msg, topic) => {\n    let body = {\n      to: `/topics/${topic}`,\n      data: msg,\n    };\n    fetch(`https://fcm.googleapis.com/fcm/send`, {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization:\n          \"key=AAAApiZX2cQ:APA91bGE4My7SUbJhjgtK66X8eADgEsxnBlebWlqIjfUw2YSxn43g3kZjH5mSIcHLdyH1Wfg0cwCWw8rv66tR_D2y3IyH3MCQf-9nfN4zH_SqyvqF-yOeVApflNV6bY_4SbwmgFzLKjp\",\n        \"Content-Type\": \"application/json\",\n      }),\n      body: JSON.stringify({\n        data: msg,\n        to: `/topics/${topic}`,\n      }),\n    })\n      .then((response) => {\n        if (response.status < 200 || response.status >= 400) {\n          throw new Error(`Error ${response.status} - ${response.text()}`);\n        }\n        console.log(\"Success\");\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {number} {name}\n        </p>\n        <p className=\"App-link\" onClick={logout}>\n          logout\n        </p>\n        <p onClick={() => subscribeTokenToTopic(token, \"test\")}>알림 받기</p>\n        <p onClick={() => unsubscribeTokenToTopic(token, \"test\")}>\n          알림 안받기\n        </p>\n        <p\n          onClick={() =>\n            sendToTopic(\n              {\n                message: \"test\",\n              },\n              \"notice\"\n            )\n          }\n        >\n          알림 보내기\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
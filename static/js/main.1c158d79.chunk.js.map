{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","auth","getAuth","messaging","getMessaging","useState","name","setName","token","setToken","useEffect","onAuthStateChanged","user","console","log","email","includes","alert","signOut","displayName","navigator","serviceWorker","register","then","reg","getToken","serviceWorkerRegistration","vapidKey","currentToken","catch","err","error","provider","GoogleAuthProvider","setCustomParameters","login_hint","signInWithRedirect","onMessage","payload","Notification","permission","icon","body","data","message","className","onClick","topic","fetch","method","headers","Headers","Authorization","response","status","Error","text","subscribeTokenToTopic","to","registration_tokens","JSON","stringify","unsubscribeTokenToTopic","msg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c158d79.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDugiSdAbhcAv4kjvZIczRILR0cWnyoLE4\",\n  authDomain: \"don-t-sick.firebaseapp.com\",\n  projectId: \"don-t-sick\",\n  storageBucket: \"don-t-sick.appspot.com\",\n  messagingSenderId: \"713607862724\",\n  appId: \"1:713607862724:web:5ada0cc3cdaa6370662c91\",\n};\n\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\n","import \"./App.css\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  GoogleAuthProvider,\n  signOut,\n  onAuthStateChanged,\n} from \"firebase/auth\";\nimport { getMessaging, getToken, onMessage } from \"firebase/messaging\";\nimport { app } from \"./firebase\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const auth = getAuth(app);\n  const messaging = getMessaging();\n  const [name, setName] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n\n  useEffect(() => {\n    // 로그인한 사용자 가져오기\u001c\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        console.log(user);\n        let email = user.email;\n        // 학교 계정이 아니면 다시 로그인\n        if (!email.includes(\"@sdh.hs.kr\")) {\n          alert(\"학교계정으로만 로그인 가능합니다.\");\n          signOut(auth);\n          return;\n        }\n        setName(user.displayName);\n\n        // 알림 토큰 저장\n        if (navigator.serviceWorker) {\n          navigator.serviceWorker\n            .register(\"/dont-sick-react/firebase-messaging-sw.js\")\n            .then(function (reg) {\n              console.log(\"서비스워커 등록성공 :\", reg);\n              getToken(messaging, {\n                serviceWorkerRegistration: reg,\n                vapidKey:\n                  \"BLnmZ7MoMERjyVHv4b791C7j1_-xqcVi9aCrVWDDFovZSGDgK9FROae3J8Q7AWqTJwbQDc2Dk4LrU0zAEUVqfVQ\",\n              })\n                .then((currentToken) => {\n                  if (currentToken) {\n                    console.log(currentToken);\n                    setToken(currentToken);\n                  } else {\n                    console.log(\n                      \"No registration token available. Request permission to generate one.\"\n                    );\n                    alert(\"알림 권한을 허용해주세요.\");\n                  }\n                })\n                .catch((err) => {\n                  console.log(\n                    \"An error occurred while retrieving token. \",\n                    err\n                  );\n                  alert(\"알림 권한을 허용해주세요.\");\n                });\n            })\n            .catch(function (error) {\n              console.log(\"서비스워커 등록실패 :\", error);\n            });\n        }\n      }\n      // 로그인이 안되어있으면 로그인 페이지로 이동\n      else {\n        const provider = new GoogleAuthProvider();\n\n        provider.setCustomParameters({\n          login_hint: \"sdh@sdh.hs.kr\",\n        });\n\n        signInWithRedirect(auth, provider);\n      }\n    });\n  }, [auth]);\n\n  const logout = () => {\n    signOut(auth);\n  };\n\n  // 포그라운드일 때 알림이 오면\n  onMessage(messaging, (payload) => {\n    console.log(\"Message received. \", payload);\n    if (Notification.permission !== \"granted\") {\n      alert(\"notification is disabled\");\n    } else {\n      var notification = new Notification(\"아프지말고\", {\n        icon: \"images/logo.png\",\n        body: payload.data.message,\n      });\n\n      // notification.onclick = function () {\n      //     window.open('http://google.com');\n      // };\n    }\n  });\n\n  // 알림 받기 등록\n  const subscribeTokenToTopic = (token, topic) => {\n    fetch(`https://iid.googleapis.com/iid/v1/${token}/rel/topics/${topic}`, {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization:\n          \"key=AAAApiZX2cQ:APA91bGE4My7SUbJhjgtK66X8eADgEsxnBlebWlqIjfUw2YSxn43g3kZjH5mSIcHLdyH1Wfg0cwCWw8rv66tR_D2y3IyH3MCQf-9nfN4zH_SqyvqF-yOeVApflNV6bY_4SbwmgFzLKjp\",\n      }),\n    })\n      .then((response) => {\n        if (response.status < 200 || response.status >= 400) {\n          throw new Error(\n            `Error Subscribing to topic: ${\n              response.status\n            } - ${response.text()}`\n          );\n        }\n        console.log(`Subscribed to \"${topic}\"`);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  // 알림 받기 등록 취소\n  const unsubscribeTokenToTopic = (token, topic) => {\n    let body = {\n      to: `/topics/${topic}`,\n      registration_tokens: [token],\n    };\n    fetch(`https://iid.googleapis.com/iid/v1:batchRemove`, {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization:\n          \"key=AAAApiZX2cQ:APA91bGE4My7SUbJhjgtK66X8eADgEsxnBlebWlqIjfUw2YSxn43g3kZjH5mSIcHLdyH1Wfg0cwCWw8rv66tR_D2y3IyH3MCQf-9nfN4zH_SqyvqF-yOeVApflNV6bY_4SbwmgFzLKjp\",\n        \"Content-Type\": \"application/json\",\n      }),\n      body: JSON.stringify(body),\n    })\n      .then((response) => {\n        if (response.status < 200 || response.status >= 400) {\n          throw new Error(\n            `Error Unsubscribing to topic: ${\n              response.status\n            } - ${response.text()}`\n          );\n        }\n        console.log(`Unsubscribed to \"${topic}\"`);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  // 알림 받기에 등록한 사람들에게 알림 보내기\n  const sendToTopic = (msg, topic) => {\n    let body = {\n      to: `/topics/${topic}`,\n      data: msg,\n    };\n    fetch(`https://fcm.googleapis.com/fcm/send`, {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization:\n          \"key=AAAApiZX2cQ:APA91bGE4My7SUbJhjgtK66X8eADgEsxnBlebWlqIjfUw2YSxn43g3kZjH5mSIcHLdyH1Wfg0cwCWw8rv66tR_D2y3IyH3MCQf-9nfN4zH_SqyvqF-yOeVApflNV6bY_4SbwmgFzLKjp\",\n        \"Content-Type\": \"application/json\",\n      }),\n      body: JSON.stringify({\n        data: msg,\n        to: `/topics/${topic}`,\n      }),\n    })\n      .then((response) => {\n        if (response.status < 200 || response.status >= 400) {\n          throw new Error(`Error ${response.status} - ${response.text()}`);\n        }\n        console.log(\"Success\");\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{name}</p>\n        <p className=\"App-link\" onClick={logout}>\n          logout\n        </p>\n        <p onClick={() => subscribeTokenToTopic(token, \"notice\")}>알림 받기</p>\n        <p onClick={() => unsubscribeTokenToTopic(token, \"notice\")}>\n          알림 안받기\n        </p>\n        <p\n          onClick={() =>\n            sendToTopic(\n              {\n                message: \"test\",\n              },\n              \"notice\"\n            )\n          }\n        >\n          알림 보내기\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}